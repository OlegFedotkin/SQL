DROP DATABASE IF EXISTS okko;
CREATE DATABASE okko;
USE okko;


DROP TABLE IF EXISTS countries;
CREATE TABLE countries (
	id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT UNIQUE,
    country VARCHAR(50) NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


DROP TABLE IF EXISTS genres;
CREATE TABLE genres (
	id TINYINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(30),
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);


DROP TABLE IF EXISTS customers;
CREATE TABLE customers (
	id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
    name VARCHAR(50),
    email VARCHAR(120) NOT NULL UNIQUE,
    phone BIGINT UNSIGNED NOT NULL UNIQUE, 
 	password_hash VARCHAR(100),
 	active BIT DEFAULT 1,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	
	INDEX customers_phone_email_idx(email, phone),
    INDEX users_name_idx(name)
);


DROP TABLE IF EXISTS bank_details;
CREATE TABLE bank_details (
	id SERIAL,
	customers_id BIGINT UNSIGNED NOT NULL,
    account_namber BIGINT UNSIGNED NOT NULL,
    `month` TINYINT,
    `year` INT,
    `CCV` INT,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (customers_id) REFERENCES customers(id) 
);


DROP TABLE IF EXISTS produsers;
CREATE TABLE produsers (
	id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
    firstname VARCHAR(50),
    lastname VARCHAR(50), 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
	
);


DROP TABLE IF EXISTS actors;
CREATE TABLE actors (
	id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, 
    firstname VARCHAR(50),
    lastname VARCHAR(50), 
    country_id SMALLINT UNSIGNED NOT NULL,
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    
    FOREIGN KEY (country_id) REFERENCES countries(id)
	
);


DROP TABLE IF EXISTS movies;
CREATE TABLE movies (
	id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    description TEXT, 
 	release_year YEAR,
 	country_id SMALLINT UNSIGNED NOT NULL,
 	produser_id SMALLINT UNSIGNED NOT NULL,
 	genre_id TINYINT UNSIGNED NOT NULL,
 	movies_length SMALLINT UNSIGNED NOT NULL,
 	created_at DATETIME DEFAULT NOW(),
 	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
 	
 	INDEX movies_name_idx(name),
 	FOREIGN KEY (country_id) REFERENCES countries(id), 
	FOREIGN KEY (produser_id) REFERENCES produsers(id), 
	FOREIGN KEY (genre_id) REFERENCES genres(id)
);


DROP TABLE IF EXISTS movie_ratings;
CREATE TABLE movie_ratings (
	id SERIAL,
	movie_id BIGINT UNSIGNED,
    customer_id BIGINT UNSIGNED,
    rating ENUM('1', '2', '3', '4', '5'),
    
    FOREIGN KEY (movie_id) REFERENCES movies(id), 
	FOREIGN KEY (customer_id) REFERENCES customers(id)
);


DROP TABLE IF EXISTS actors_film;
CREATE TABLE actors_film (
	id SERIAL,
    movie_id BIGINT UNSIGNED NOT NULL,
    actor_id SMALLINT UNSIGNED NOT NULL, 
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
 	FOREIGN KEY (movie_id) REFERENCES movies(id), 
	FOREIGN KEY (actor_id) REFERENCES actors(id)
);


DROP TABLE IF EXISTS catalogs;
CREATE TABLE catalogs (
	id SERIAL,
	movie_id BIGINT UNSIGNED NOT NULL, 
	price DECIMAL (11,2),
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  
	FOREIGN KEY (movie_id) REFERENCES movies(id)
);


DROP TABLE IF EXISTS payments;
CREATE TABLE payments (
	id SERIAL,
	movie_id BIGINT UNSIGNED NOT NULL, 
	customer_id BIGINT UNSIGNED NOT NULL,
	amount DECIMAL (11,2),
	payment_date DATETIME  COMMENT 'Без DEFAULT для триггера',
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  
  FOREIGN KEY (movie_id) REFERENCES movies(id),
  FOREIGN KEY (customer_id) REFERENCES customers(id)
);



